
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <iostream>
#include "glut.h"
#include <limits>
#include<cmath>
#include<vector>

// dimensiunea ferestrei in pixeli
#define dim 600

unsigned char prevKey;

float mostAppropriateInt(float x) {
    return fabs(round(x) - x);
}

float function1(float value) {
    if (value == 0)
        return 1;
    return mostAppropriateInt(value) / value;

}



// concoida lui Nicomede (concoida dreptei)
// $x = a + b \cdot cos(t), y = a \cdot tg(t) + b \cdot sin(t)$. sau
// $x = a - b \cdot cos(t), y = a \cdot tg(t) - b \cdot sin(t)$. unde
// $t \in (-\pi / 2, \pi / 2)$
void Display1() {
    double xmax, ymax, xmin, ymin;
    double a = 1, b = 2;
    double pi = 4 * atan(1.0);
    double ratia = 0.05;
    double t;

    // calculul valorilor maxime/minime ptr. x si y
    // aceste valori vor fi folosite ulterior la scalare
    xmax = a - b - 1;
    xmin = a + b + 1;
    ymax = ymin = 0;
    //t e (-pi/2,pi/2)
    for (t = -pi / 2 + ratia; t < pi / 2; t += ratia) {
        double x1, y1, x2, y2;
        x1 = a + b * cos(t);
        xmax = (xmax < x1) ? x1 : xmax;
        xmin = (xmin > x1) ? x1 : xmin;

        x2 = a - b * cos(t);
        xmax = (xmax < x2) ? x2 : xmax;
        xmin = (xmin > x2) ? x2 : xmin;

        y1 = a * tan(t) + b * sin(t);
        ymax = (ymax < y1) ? y1 : ymax;
        ymin = (ymin > y1) ? y1 : ymin;

        y2 = a * tan(t) - b * sin(t);
        ymax = (ymax < y2) ? y2 : ymax;
        ymin = (ymin > y2) ? y2 : ymin;
    }

    xmax = (fabs(xmax) > fabs(xmin)) ? fabs(xmax) : fabs(xmin);
    ymax = (fabs(ymax) > fabs(ymin)) ? fabs(ymax) : fabs(ymin);

    // afisarea punctelor propriu-zise precedata de scalare
    glColor3f(1, 0.1, 0.1); // rosu
    glBegin(GL_LINE_STRIP);
    for (t = -pi / 2 + ratia; t < pi / 2; t += ratia) {
        double x1, y1, x2, y2;
        x1 = (a + b * cos(t)) / xmax;
        x2 = (a - b * cos(t)) / xmax;
        y1 = (a * tan(t) + b * sin(t)) / ymax;
        y2 = (a * tan(t) - b * sin(t)) / ymax;

        glVertex2f(x1, y1);
    }
    glEnd();

    glBegin(GL_LINE_STRIP);
    for (t = -pi / 2 + ratia; t < pi / 2; t += ratia) {
        double x1, y1, x2, y2;
        x1 = (a + b * cos(t)) / xmax;
        x2 = (a - b * cos(t)) / xmax;
        y1 = (a * tan(t) + b * sin(t)) / ymax;
        y2 = (a * tan(t) - b * sin(t)) / ymax;

        glVertex2f(x2, y2);
    }
    glEnd();
}

// graficul functiei 
// $f(x) = \bar sin(x) \bar \cdot e^{-sin(x)}, x \in \langle 0, 8 \cdot \pi \rangle$, 
void Display2() {
    double pi = 4 * atan(1.0);
    double xmax = 8 * pi;
    double ymax = exp(1.1);
    double ratia = 0.05;

    // afisarea punctelor propriu-zise precedata de scalare
    glColor3f(1, 0.1, 0.1); // rosu
    glBegin(GL_LINE_STRIP);
    for (double x = 0; x < xmax; x += ratia) {
        double x1, y1;
        x1 = x / xmax;
        y1 = (fabs(sin(x)) * exp(-sin(x))) / ymax;

        glVertex2f(x1, y1);
    }
    glEnd();
}

void Display3() {
    double  xmax = 50;
    double ration = 0.005;
    float scale = 1.3;
    double  offsetX = -0.5;
    double offsetY = -0.5;
    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (double x = 0; x <= xmax; x += ration) {
        glVertex2f((x/xmax)*scale+offsetX, (function1(x)*scale+offsetY));
    }
    glEnd();
}




void Display4() {
    double pi = 4 * atan(1.0);
    double a = 0.3, b = 0.2;

    float scaleFactor = 1;
    double  offsetX = 0;
    double offsetY = 0;
    
    double step = 0.05;


    auto x_calc = [a,b, scaleFactor, offsetX](double t) {return scaleFactor *(2 * (a * cos(t) + b) * cos(t))+ offsetX; };
    auto y_calc = [a, b, scaleFactor, offsetY](double t) {return scaleFactor * (2 * (a * cos(t) + b) * sin(t)) + offsetY; };
    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (double t = -pi; t < pi; t += step) {
        glVertex2f(x_calc(t),y_calc(t));

    }
    glEnd();
}



void Display5() {
    double pi = 4 * atan(1.0);
    double a = 0.2f;
    auto xmax = a / (-7);
    //auto ymax=xmax*tan()
    double step = 0.0005;
    auto x_calc = [a](double t) {return a / (4 * pow(cos(t), 2) - 3); };
    auto y_calc = [a](double t) {return (a * tan(t)) / (4 * pow(cos(t), 2) - 3); };
    glColor3f(0, 0, 1);
    std::vector<double> y_temp;
    std::vector<double> x_temp;
    glBegin(GL_LINE_STRIP);
    auto max_value = 0.0f;
    //for (double t = -(pi / 2) + step; t < (pi / 2); t += step) {

    for (double t = -(pi / 2) + step; t <-(pi/6); t += step) {
        if (t != (pi / 6) or t != (-pi / 6)) {
            //191.0f         169
            //551.0f       720.0f
            glVertex2f(x_calc(t)+1 , y_calc(t)-1 );
            x_temp.push_back(x_calc(t) + 1);
            y_temp.push_back(y_calc(t) - 1);
        }
    }
    glColor3f(1, 0.1, 0.1);
    
    for (auto i = 1; i < x_temp.size() - 1; i += 3) {

        if (i > x_temp.size() / 4 && i < 3 * x_temp.size() / 4) continue;

        if (y_temp[i] > -0.35) {
            glBegin(GL_TRIANGLES);
            glVertex2f(-1.0, 1.0);
            glVertex2f(x_temp[i], y_temp[i]);
            glVertex2f(x_temp[i + 1], y_temp[i + 1]);
            glEnd();
        }
    }
    glEnd();


}

void Display6() {
    double pi = 4 * atan(1.0);
    double a = 0.1,b=0.2;
    double step = 0.05;
    auto x_calc = [a,b](double t) {return a*t-b*sin(t); };
    auto y_calc = [a, b](double t) {return a - b * cos(t); };
    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (double t = -1000; t < 1000; t += step) {
            glVertex2f(x_calc(t) , y_calc(t) );
    }
    glEnd();
}



void Display7() {
    auto pi = 4 * atan(1.0);
    auto R = 0.1, r = 0.3;
    auto step = 0.0005;
    auto x_calc = [r, R](double t) {return (r+R)*cos((r/R)*t)-r*cos(t+(r/R)*t); };
    auto y_calc = [r, R](double t) {return (r + R) * sin((r / R) * t) - r * sin(t + (r / R) * t); };
    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (auto t = 0.0f; t <=2*pi; t += step) {
        glVertex2f(x_calc(t), y_calc(t));
    }
    glEnd();
}

void Display8() {
    auto pi = 4 * atan(1.0);
    auto R = 0.1, r = 0.3;
    auto step = 0.0005;
    auto x_calc = [r, R](double t) {return (R -r) * cos((r / R) * t) - r * cos(t - (r / R) * t); };
    auto y_calc = [r, R](double t) {return (R - r) * sin((r / R) * t) - r * sin(t - (r / R) * t); };
    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (auto t = 0.0f; t <= 2 * pi; t += step) {
        glVertex2f(x_calc(t), y_calc(t));
    }
    glEnd();
}


void Display9() {
    auto pi = 4 * atan(1.0);
    auto a = 0.4;
    auto step = 0.0005;
    auto r_calc = [a](double t) {return a*sqrt(2*cos(2*t)); };
    auto x_calc = [r_calc, a](double t) {return r_calc(t) * cos(t); };
    auto y_calc = [r_calc, a](double t) {return r_calc(t) * sin(t); };

    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (auto t = -(pi/4); t <= (pi/4); t += step) {
        glVertex2f(-x_calc(t), -y_calc(t));

    }
    for (auto t = -(pi / 4) ; t <= (pi / 4); t += step) {
        glVertex2f(x_calc(t), y_calc(t));
    }
    glEnd();
}


void Display0() {
    auto pi = 4 * atan(1.0);
    auto a = 0.02;
    auto e = 2.718281828459045;
    auto step = 0.0005;
    auto r_calc = [a,e](double t) {return a * pow(e, 1 + t); };
    auto x_calc = [r_calc, a](double t) {return r_calc(t) * cos(t); };
    auto y_calc = [r_calc, a](double t) {return r_calc(t) * sin(t); };

    glColor3f(1, 0.1, 0.1);
    glBegin(GL_LINE_STRIP);
    for (double t = 0; t < 10; t += step) {
        glVertex2f(x_calc(t), y_calc(t));
    }
    glEnd();
}



void Init(void) {

    glClearColor(1.0, 1.0, 1.0, 1.0);

    glLineWidth(1);

    //   glPointSize(4);

    glPolygonMode(GL_FRONT, GL_LINE);
}

void Display(void) {
    glClear(GL_COLOR_BUFFER_BIT);

    switch (prevKey) {
    case '1':
        Display1();
        break;
    case '2':
        Display2();
        break;
    case '3':
        Display3();
        break;
    case '4':
        Display4();
        break;
    case '5':
        Display5();
        break;
    case '6':
        Display6();
        break;
    case '7':
        Display7();
        break;
    case '8':
        Display8();
        break;
    case '9':
        Display9();
        break;
    case '0':
        Display0();
        break;
    default:
        break;
    }

    glFlush();
}

void Reshape(int w, int h) {
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
}

void KeyboardFunc(unsigned char key, int x, int y) {
    prevKey = key;
    if (key == 27) // escape
        exit(0);
    glutPostRedisplay();
}

void MouseFunc(int button, int state, int x, int y) {
}

int main(int argc, char** argv) {

    glutInit(&argc, argv);

    glutInitWindowSize(dim, dim);

    glutInitWindowPosition(100, 100);

    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    glutCreateWindow(argv[0]);

    Init();

    glutReshapeFunc(Reshape);

    glutKeyboardFunc(KeyboardFunc);

    glutMouseFunc(MouseFunc);

    glutDisplayFunc(Display);

    glutMainLoop();

    return 0;
    
}
