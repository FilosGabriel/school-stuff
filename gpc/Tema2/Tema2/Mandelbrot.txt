#include <iostream>

#include "lab3_1.cpp"

namespace
{
#define MAX_ITER_MANDELBROT 5000
#define MAX_VALUE_MANDELBROT 10000000

	class Mandelbrot
	{
	public:


		Mandelbrot()
		{
			max_iter = MAX_ITER_MANDELBROT;
		}


		void set_step(double step)
		{
			this->step = step;
		}

		void set_max_iter(int max_iter)
		{
			this->max_iter = max_iter;
		}


		void set_diver(int diver)
		{
			this->diver = diver;
		}

		unsigned int is_in(const CComplex& otherZ)
		{
			auto z0 = CComplex(0, 0);
			for (auto i = 1; i < max_iter; i++)
			{
				auto z1 = z0 * z0 + otherZ;
				if (z1.getModul() > 2.0f)
					return i;
				z0 = z1;
			}
			return 0;
		}

		int getColor(int iter)
		{
			return (iter % 20) * diver;
		}

		void display(double xmin, double ymin, double xmax, double ymax)
		{
			glPushMatrix();
			glLoadIdentity();
			glBegin(GL_POINTS);
			int max_ = 0;
			for (double x = xmin; x <= xmax; x += step)
			// #pragma omp for
				for (double y = ymin; y <= ymax; y += step)
				{
					CComplex z(x, y);
					int iter = is_in(z);
					if (iter == 0)
					{
						glColor3f(0.44705882, 0.066666, 0.129411);
						glVertex2d((x + 0.5) / 1.5, y / 2);
					}
					else
					{
						int color = getColor(iter);
						glColor4f(iter * 4 / 100.0f, color / 260.0f, 0.1503, 1 - 3*color / 250.0f);
						glVertex2d((x + 0.5) / 1.5, y / 2);
					}
				}
			std::cout << max_;
			fprintf(stdout, "STOP\n");
			glEnd();

			glPopMatrix();
		}

		static void Display1()
		{
			std::cout << "Run Mandelbrot\n";
			Mandelbrot m1;
			m1.set_max_iter(400);
			// m1.set_step(0.00076);
			m1.set_step(0.001);
			m1.set_diver(5);
			m1.display(-2.0f, -2.0f, 2.0f, 2.0f);
		}


	private:
		CComplex c;
		int max_iter;
		double max_value;
		double step;
		int diver = 1;
	};
}
