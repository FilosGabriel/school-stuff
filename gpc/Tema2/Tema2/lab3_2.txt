#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <float.h>

#include "glut.h"

namespace
{
	// dimensiunea ferestrei in pixeli
#define DIM 1000

	int nivel = 0;


	class C2coord
	{
	public:
		C2coord()
		{
			m.x = m.y = 0;
		}

		C2coord(double x, double y)
		{
			m.x = x;
			m.y = y;
		}

		C2coord(const C2coord& p)
		{
			m.x = p.m.x;
			m.y = p.m.y;
		}

		C2coord& operator=(C2coord& p)
		{
			m.x = p.m.x;
			m.y = p.m.y;
			return *this;
		}

		int operator==(C2coord& p)
		{
			return ((m.x == p.m.x) && (m.y == p.m.y));
		}

	protected:
		struct SDate
		{
			double x, y;
		} m;
	};

	class CPunct : public C2coord
	{
	public:
		CPunct() : C2coord(0.0, 0.0)
		{
		}

		CPunct(double x, double y) : C2coord(x, y)
		{
		}

		CPunct& operator=(const CPunct& p)
		{
			m.x = p.m.x;
			m.y = p.m.y;
			return *this;
		}

		void setxy(double& x, double& y)
		{
			x = m.x;
			y = m.y;
		}

		int operator==(CPunct& p)
		{
			return ((m.x == p.m.x) && (m.y == p.m.y));
		}

		void marcheaza()
		{
			glBegin(GL_POINTS);
			glVertex2d(m.x, m.y);
			glEnd();
		}

		void print(FILE* fis)
		{
			fprintf(fis, "(%+f,%+f)", m.x, m.y);
		}
	};


	// Line class
	class CVector : public C2coord
	{
	public:
		CVector() : C2coord(0.0, 0.0)
		{
			normalizare();
		}

		CVector(double x, double y) : C2coord(x, y)
		{
			normalizare();
		}

		CVector& operator=(CVector& p)
		{
			m.x = p.m.x;
			m.y = p.m.y;
			return *this;
		}

		int operator==(CVector& p)
		{
			return ((m.x == p.m.x) && (m.y == p.m.y));
		}

		// get point a distance l of x 
		CPunct getDest(CPunct& orig, double lungime)
		{
			double x, y;
			orig.setxy(x, y);
			CPunct p(x + m.x * lungime, y + m.y * lungime);
			return p;
		}

		void rotatie(double grade)
		{
			double x = m.x;
			double y = m.y;
			double t = 2 * (4.0 * atan(1.0)) * grade / 360.0;
			m.x = x * cos(t) - y * sin(t);
			m.y = x * sin(t) + y * cos(t);
			normalizare();
		}

		void deseneaza(CPunct p, double lungime)
		{
			double x, y;
			// ia x.m si y.m
			p.setxy(x, y);
			glColor3f(1.0, 0.1, 0.1);
			glBegin(GL_LINE_STRIP);
			glVertex2d(x, y);
			glVertex2d(x + m.x * lungime, y + m.y * lungime);
			glEnd();
		}

		void print(FILE* fis)
		{
			fprintf(fis, "%+fi %+fj", C2coord::m.x, C2coord::m.y);
		}

	private:
		void normalizare()
		{
			double d = sqrt(C2coord::m.x * C2coord::m.x + C2coord::m.y * C2coord::m.y);
			if (d != 0.0)
			{
				C2coord::m.x = C2coord::m.x * 1.0 / d;
				C2coord::m.y = C2coord::m.y * 1.0 / d;
			}
		}
	};

	class CCurbaKoch
	{
	public:
		void segmentKoch(double lungime, int nivel, CPunct& p, CVector v)
		{
			CPunct p1;
			if (nivel == 0)
			{
				v.deseneaza(p, lungime);
			}
			else
			{
				//    v.print(stderr);
				//    fprintf(stderr, "\n");
				segmentKoch(lungime / 3.0, nivel - 1, p, v);
				p1 = v.getDest(p, lungime / 3.0);
				v.rotatie(60);
				//    v.print(stderr);
				//    fprintf(stderr, "\n");
				segmentKoch(lungime / 3.0, nivel - 1, p1, v);
				p1 = v.getDest(p1, lungime / 3.0);
				v.rotatie(-120);
				//    v.print(stderr);
				//    fprintf(stderr, "\n");
				segmentKoch(lungime / 3.0, nivel - 1, p1, v);
				p1 = v.getDest(p1, lungime / 3.0);
				v.rotatie(60);
				//    v.print(stderr);
				//    fprintf(stderr, "\n");
				segmentKoch(lungime / 3.0, nivel - 1, p1, v);
			}
		}

		void afisare(double lungime, int nivel)
		{
			CVector v1(sqrt(3.0) / 2.0, 0.5);
			CPunct p1(-1.0, 0.0);

			CVector v2(0.0, -1.0);
			CPunct p2(0.5, sqrt(3.0) / 2.0);

			CVector v3(-sqrt(3.0) / 2.0, 0.5);
			CPunct p3(0.5, -sqrt(3.0) / 2.0);

			segmentKoch(lungime, nivel, p1, v1);
			segmentKoch(lungime, nivel, p2, v2);
			segmentKoch(lungime, nivel, p3, v3);
		}
	};

	class CArboreBinar
	{
	public:
		void arboreBinar(double lungime, int nivel, CPunct& p, CVector v)
		{
			CPunct p1;
			if (nivel == 0)
			{
				v.deseneaza(p, lungime);
			}
			else
			{
				arboreBinar(lungime, nivel - 1, p, v);
				p1 = v.getDest(p, lungime);
				//
				v.rotatie(-45);
				arboreBinar(lungime / 2.0, nivel - 1, p1, v);
				//
				v.rotatie(90);
				arboreBinar(lungime / 2.0, nivel - 1, p1, v);
			}
		}

		void afisare(double lungime, int nivel)
		{
			CVector v(0.0, -1.0);
			CPunct p(0.0, 1.0);

			arboreBinar(lungime, nivel, p, v);
		}
	};


	class Img2
	{
	public:
		static void arbore(double length, int depth, CPunct& p, CVector v)
		{
			if (depth == 0)
				return;
			v.rotatie(45);
			v.deseneaza(p, length);
			auto p1 = v.getDest(p, length);
			auto p2 = p1;

			v.rotatie(-90);
			v.deseneaza(p, length);
			p1 = v.getDest(p, length);
			arbore(length * mul, depth - 1, p1, v);

			p1 = p2;
			v.rotatie(45);
			v.deseneaza(p1, length);
			p1 = v.getDest(p1, length);
			auto p3 = p1;

			p1 = p2;
			v.rotatie(60);
			v.deseneaza(p1, length);
			p1 = v.getDest(p1, length);
			arbore(length * mul, depth - 1, p1, v);

			p1 = p3;
			v.rotatie(-150);
			v.deseneaza(p1, length / 2);
			p1 = v.getDest(p1, length / 2);
			arbore(length * mul, depth - 1, p1, v);

			p1 = p3;
			v.rotatie(120);
			v.deseneaza(p1, length / 2);
			p1 = v.getDest(p1, length / 2);
			arbore(length * mul, depth - 1, p1, v);

			// arbore(length / 2.0, depth - 1, p1, v);
		}

		static void render()
		{
			CVector v(0.0, -1.0);
			CPunct p(-0.2, 1.0);
			v.deseneaza(p, 0.3);
			p = v.getDest(p, 0.3);
			if (depth == 9)
				depth = 0;
			depth++;
			arbore(0.3, depth, p, v);
		}

		static int depth;
		static float mul;
	};

	int Img2::depth = 1;
	float Img2::mul = 0.4;


	class Img3
	{
	public:
		static void arbore(double length, int depth, CPunct& top, CVector v)
		{
			if (depth <= 1)
			{
				v.rotatie(60);
				v.deseneaza(top, length); 
				auto n = v.getDest(top, length);
				//
				v.rotatie(-60);
				v.deseneaza(n, length);
				top = v.getDest(n, length);
				
				v.rotatie(-60);
				v.deseneaza(top, length);
				return;
			}

			v.rotatie(60);
			auto p1 = v.getDest(top, length);
			arbore(length, depth - 1, p1, v);
		}

		static void render()
		{
			CVector v(0.0, -1.0);
			CPunct p(0.8, 0);

			// if (depth == 9)
			// 	depth = 0;
			depth += 1;
			arbore(0.1, 2, p, v);
		}

		static int depth;
		static float mul;
	};

	int Img3::depth = 1;
	float Img3::mul = 0.4;


	class CArborePerron
	{
	public:
		void arborePerron(double lungime,
		                  int nivel,
		                  double factordiviziune,
		                  CPunct p,
		                  CVector v)
		{
			assert(factordiviziune != 0);
			CPunct p1, p2;
			if (nivel == 0)
			{
			}
			else
			{
				v.rotatie(30);
				v.deseneaza(p, lungime);
				p1 = v.getDest(p, lungime);
				arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);

				v.rotatie(-90);
				v.deseneaza(p, lungime);
				p1 = v.getDest(p, lungime);
				p2 = p1;

				v.rotatie(-30);
				v.deseneaza(p1, lungime);
				p1 = v.getDest(p1, lungime);
				arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);

				p1 = p2;
				v.rotatie(90);
				v.deseneaza(p1, lungime);
				p1 = v.getDest(p1, lungime);
				p2 = p1;

				v.rotatie(30);
				v.deseneaza(p1, lungime);
				p1 = v.getDest(p1, lungime);
				arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);

				p1 = p2;
				v.rotatie(-90);
				v.deseneaza(p1, lungime);
				p1 = v.getDest(p1, lungime);
				arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);
			}
		}

		void afisare(double lungime, int nivel)
		{
			CVector v(0.0, 1.0);
			CPunct p(0.0, -1.0);

			v.deseneaza(p, 0.25);
			p = v.getDest(p, 0.25);
			arborePerron(lungime, nivel, 0.4, p, v);
		}
	};


	class CCurbaHilbert
	{
	public:
		void curbaHilbert(double lungime, int nivel, CPunct& p, CVector& v, int d)
		{
			if (nivel == 0)
			{
			}
			else
			{
				v.rotatie(d * 90);
				curbaHilbert(lungime, nivel - 1, p, v, -d);

				v.deseneaza(p, lungime);
				p = v.getDest(p, lungime);

				v.rotatie(-d * 90);
				curbaHilbert(lungime, nivel - 1, p, v, d);

				v.deseneaza(p, lungime);
				p = v.getDest(p, lungime);

				curbaHilbert(lungime, nivel - 1, p, v, d);

				v.rotatie(-d * 90);
				v.deseneaza(p, lungime);
				p = v.getDest(p, lungime);

				curbaHilbert(lungime, nivel - 1, p, v, -d);

				v.rotatie(d * 90);
			}
		}

		void afisare(double lungime, int nivel)
		{
			CVector v(0.0, 1.0);
			CPunct p(0.0, 0.0);

			curbaHilbert(lungime, nivel, p, v, 1);
		}
	};


	// afisare curba lui Koch "fulg de zapada"
	void Displayk1()
	{
		CCurbaKoch cck;
		cck.afisare(sqrt(3.0), nivel);

		char c[3];
		sprintf_s(c, "%2d", nivel);
		glRasterPos2d(-0.98, -0.98);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

		glRasterPos2d(-1.0, 0.9);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'c');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'u');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'u');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'K');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'c');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'h');

		nivel++;
	}

	// afisare arbore binar
	void Displayk2()
	{
		CArboreBinar cab;
		cab.afisare(1, nivel);

		char c[3];
		sprintf_s(c, "%2d", nivel);
		glRasterPos2d(-0.98, -0.98);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

		glRasterPos2d(-1.0, 0.9);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'n');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');

		nivel++;
	}

	// afisare arborele lui Perron
	void Displayk3()
	{
		CArborePerron cap;

		char c[3];
		sprintf_s(c, "%2d", nivel);
		glRasterPos2d(-0.98, -0.98);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

		glRasterPos2d(-1.0, -0.9);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'P');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'n');

		glPushMatrix();
		glLoadIdentity();
		glScaled(0.4, 0.4, 1);
		glTranslated(-0.5, -0.5, 0.0);
		cap.afisare(1, nivel);
		glPopMatrix();
		nivel++;
	}

	// afisare curba lui Hilbert
	void Displayk4()
	{
		CCurbaHilbert cch;
		cch.afisare(0.05, nivel);

		char c[3];
		sprintf_s(c, "%2d", nivel);
		glRasterPos2d(-0.98, -0.98);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

		glRasterPos2d(-1.0, -0.9);
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'c');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'u');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'H');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
		glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 't');

		nivel++;
	}
}
