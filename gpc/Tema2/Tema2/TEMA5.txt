
// dimensiunea ferestrei in pixeli
#define DIM 300

// numarul maxim de iteratii pentru testarea apartenentei la mult.Julia-Fatou
#define NRITER_JF 5000

// modulul maxim pentru testarea apartenentei la mult.Julia-Fatou
#define MODMAX_JF 10000000

// ratii ptr. CJuliaFatou
#define RX_JF 0.01
#define RY_JF 0.01


#define DIM 1000

int nivel = 0;

class CComplex
{
public:
	CComplex() : re(0.0), im(0.0)
	{
	}

	CComplex(double re1, double im1) : re(re1 * 1.0), im(im1 * 1.0)
	{
	}

	CComplex(const CComplex& c) : re(c.re), im(c.im)
	{
	}

	~CComplex() = default;

	CComplex& operator=(const CComplex& c)
	{
		re = c.re;
		im = c.im;
		return *this;
	}

	double getRe() { return re; }
	void setRe(double re1) { re = re1; }

	double getIm() { return im; }
	void setIm(double im1) { im = im1; }

	double getModul() { return sqrt(re * re + im * im); }

	int operator==(CComplex& c1)
	{
		return ((re == c1.re) && (im == c1.im));
	}

	CComplex pow2()
	{
		CComplex rez;
		rez.re = powl(re * 1.0, 2) - powl(im * 1.0, 2);
		rez.im = 2.0 * re * im;
		return rez;
	}

	friend CComplex operator+(const CComplex& c1, const CComplex& c2);
	friend CComplex operator*(CComplex& c1, CComplex& c2);

	void print(FILE* f)
	{
		// fprintf(f, "%.20f%+.20f i", re, im);
	}

private:
	double re, im;
};

CComplex operator+(const CComplex& c1, const CComplex& c2)
{
	CComplex rez(c1.re + c2.re, c1.im + c2.im);
	return rez;
}

CComplex operator*(CComplex& c1, CComplex& c2)
{
	CComplex rez(c1.re * c2.re - c1.im * c2.im,
		c1.re * c2.im + c1.im * c2.re);
	return rez;
}

class C2coord
{
public:
	C2coord()
	{
		m.x = m.y = 0;
	}

	C2coord(double x, double y)
	{
		m.x = x;
		m.y = y;
	}

	C2coord(const C2coord& p)
	{
		m.x = p.m.x;
		m.y = p.m.y;
	}

	C2coord& operator=(C2coord& p)
	{
		m.x = p.m.x;
		m.y = p.m.y;
		return *this;
	}

	int operator==(C2coord& p)
	{
		return ((m.x == p.m.x) && (m.y == p.m.y));
	}

protected:
	struct SDate
	{
		double x, y;
	} m;
};

class CPunct : public C2coord
{
public:
	CPunct() : C2coord(0.0, 0.0)
	{
	}

	CPunct(double x, double y) : C2coord(x, y)
	{
	}

	CPunct& operator=(const CPunct& p)
	{
		m.x = p.m.x;
		m.y = p.m.y;
		return *this;
	}

	void setxy(double& x, double& y)
	{
		x = m.x;
		y = m.y;
	}

	void print()
	{
		std::cout << m.x << "  " << m.y << "\n";
	}

	int operator==(CPunct& p)
	{
		return ((m.x == p.m.x) && (m.y == p.m.y));
	}

	void marcheaza()
	{
		glBegin(GL_POINTS);
		glVertex2d(m.x, m.y);
		glEnd();
	}

	void print(FILE* fis)
	{
		fprintf(fis, "(%+f,%+f)", m.x, m.y);
	}
};


// Line class
class CVector : public C2coord
{
public:
	CVector() : C2coord(0.0, 0.0)
	{
		normalizare();
	}

	CVector(double x, double y) : C2coord(x, y)
	{
		normalizare();
	}

	CVector& operator=(CVector& p)
	{
		m.x = p.m.x;
		m.y = p.m.y;
		return *this;
	}

	int operator==(CVector& p)
	{
		return ((m.x == p.m.x) && (m.y == p.m.y));
	}

	// get point a distance l of x 
	CPunct getDest(CPunct& orig, double lungime)
	{
		double x, y;
		orig.setxy(x, y);
		CPunct p(x + m.x * lungime, y + m.y * lungime);
		return p;
	}

	void rotatie(double grade)
	{
		double x = m.x;
		double y = m.y;
		double t = 2 * (4.0 * atan(1.0)) * grade / 360.0;
		m.x = x * cos(t) - y * sin(t);
		m.y = x * sin(t) + y * cos(t);
		normalizare();
	}

	void deseneaza(CPunct p, double lungime)
	{
		double x, y;
		// ia x.m si y.m
		p.setxy(x, y);
		glColor3f(1.0, 0.1, 0.1);
		// glColor3f( rand()/RAND_MAX, abs(x), abs(y/2));
		glBegin(GL_LINE_STRIP);
		glVertex2d(x, y);
		glVertex2d(x + m.x * lungime, y + m.y * lungime);
		glEnd();
	}

	void print(FILE* fis)
	{
		fprintf(fis, "%+fi %+fj", C2coord::m.x, C2coord::m.y);
	}

private:
	void normalizare()
	{
		double d = sqrt(C2coord::m.x * C2coord::m.x + C2coord::m.y * C2coord::m.y);
		if (d != 0.0)
		{
			C2coord::m.x = C2coord::m.x * 1.0 / d;
			C2coord::m.y = C2coord::m.y * 1.0 / d;
		}
	}
};

class CCurbaKoch
{
public:
	void segmentKoch(double lungime, int nivel, CPunct& p, CVector v)
	{
		CPunct p1;
		if (nivel == 0)
		{
			v.deseneaza(p, lungime);
		}
		else
		{
			//    v.print(stderr);
			//    fprintf(stderr, "\n");
			segmentKoch(lungime / 3.0, nivel - 1, p, v);
			p1 = v.getDest(p, lungime / 3.0);
			v.rotatie(60);
			//    v.print(stderr);
			//    fprintf(stderr, "\n");
			segmentKoch(lungime / 3.0, nivel - 1, p1, v);
			p1 = v.getDest(p1, lungime / 3.0);
			v.rotatie(-120);
			//    v.print(stderr);
			//    fprintf(stderr, "\n");
			segmentKoch(lungime / 3.0, nivel - 1, p1, v);
			p1 = v.getDest(p1, lungime / 3.0);
			v.rotatie(60);
			//    v.print(stderr);
			//    fprintf(stderr, "\n");
			segmentKoch(lungime / 3.0, nivel - 1, p1, v);
		}
	}

	void afisare(double lungime, int nivel)
	{
		CVector v1(sqrt(3.0) / 2.0, 0.5);
		CPunct p1(-1.0, 0.0);

		CVector v2(0.0, -1.0);
		CPunct p2(0.5, sqrt(3.0) / 2.0);

		CVector v3(-sqrt(3.0) / 2.0, 0.5);
		CPunct p3(0.5, -sqrt(3.0) / 2.0);

		segmentKoch(lungime, nivel, p1, v1);
		segmentKoch(lungime, nivel, p2, v2);
		segmentKoch(lungime, nivel, p3, v3);
	}
};

class CArboreBinar
{
public:
	void arboreBinar(double lungime, int nivel, CPunct& p, CVector v)
	{
		CPunct p1;
		if (nivel == 0)
		{
			v.deseneaza(p, lungime);
		}
		else
		{
			arboreBinar(lungime, nivel - 1, p, v);
			p1 = v.getDest(p, lungime);
			//
			v.rotatie(-45);
			arboreBinar(lungime / 2.0, nivel - 1, p1, v);
			//
			v.rotatie(90);
			arboreBinar(lungime / 2.0, nivel - 1, p1, v);
		}
	}

	void afisare(double lungime, int nivel)
	{
		CVector v(0.0, -1.0);
		CPunct p(0.0, 1.0);

		arboreBinar(lungime, nivel, p, v);
	}
};

class CArborePerron
{
public:
	void arborePerron(double lungime,
		int nivel,
		double factordiviziune,
		CPunct p,
		CVector v)
	{
		assert(factordiviziune != 0);
		CPunct p1, p2;
		if (nivel == 0)
		{
		}
		else
		{
			v.rotatie(30);
			v.deseneaza(p, lungime);
			p1 = v.getDest(p, lungime);
			arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);

			v.rotatie(-90);
			v.deseneaza(p, lungime);
			p1 = v.getDest(p, lungime);
			p2 = p1;

			v.rotatie(-30);
			v.deseneaza(p1, lungime);
			p1 = v.getDest(p1, lungime);
			arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);

			p1 = p2;
			v.rotatie(90);
			v.deseneaza(p1, lungime);
			p1 = v.getDest(p1, lungime);
			p2 = p1;

			v.rotatie(30);
			v.deseneaza(p1, lungime);
			p1 = v.getDest(p1, lungime);
			arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);

			p1 = p2;
			v.rotatie(-90);
			v.deseneaza(p1, lungime);
			p1 = v.getDest(p1, lungime);
			arborePerron(lungime * factordiviziune, nivel - 1, factordiviziune, p1, v);
		}
	}

	void afisare(double lungime, int nivel)
	{
		CVector v(0.0, 1.0);
		CPunct p(0.0, -1.0);

		v.deseneaza(p, 0.25);
		p = v.getDest(p, 0.25);
		arborePerron(lungime, nivel, 0.4, p, v);
	}
};


class CCurbaHilbert
{
public:
	void curbaHilbert(double lungime, int nivel, CPunct& p, CVector& v, int d)
	{
		if (nivel == 0)
		{
		}
		else
		{
			v.rotatie(d * 90);
			curbaHilbert(lungime, nivel - 1, p, v, -d);

			v.deseneaza(p, lungime);
			p = v.getDest(p, lungime);

			v.rotatie(-d * 90);
			curbaHilbert(lungime, nivel - 1, p, v, d);

			v.deseneaza(p, lungime);
			p = v.getDest(p, lungime);

			curbaHilbert(lungime, nivel - 1, p, v, d);

			v.rotatie(-d * 90);
			v.deseneaza(p, lungime);
			p = v.getDest(p, lungime);

			curbaHilbert(lungime, nivel - 1, p, v, -d);

			v.rotatie(d * 90);
		}
	}

	void afisare(double lungime, int nivel)
	{
		CVector v(0.0, 1.0);
		CPunct p(0.0, 0.0);

		curbaHilbert(lungime, nivel, p, v, 1);
	}
};


// afisare curba lui Koch "fulg de zapada"
void Displayk1()
{
	CCurbaKoch cck;
	cck.afisare(sqrt(3.0), nivel);

	char c[3];
	sprintf_s(c, "%2d", nivel);
	glRasterPos2d(-0.98, -0.98);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

	glRasterPos2d(-1.0, 0.9);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'c');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'u');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'u');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'K');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'c');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'h');

	nivel++;
}

// afisare arbore binar
void Displayk2()
{
	CArboreBinar cab;
	cab.afisare(1, nivel);

	char c[3];
	sprintf_s(c, "%2d", nivel);
	glRasterPos2d(-0.98, -0.98);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

	glRasterPos2d(-1.0, 0.9);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'n');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');

	nivel++;
}

// afisare arborele lui Perron
void Displayk3()
{
	CArborePerron cap;

	char c[3];
	sprintf_s(c, "%2d", nivel);
	glRasterPos2d(-0.98, -0.98);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

	glRasterPos2d(-1.0, -0.9);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'P');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'o');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'n');

	glPushMatrix();
	glLoadIdentity();
	glScaled(0.4, 0.4, 1);
	glTranslated(-0.5, -0.5, 0.0);
	cap.afisare(1, nivel);
	glPopMatrix();
	nivel++;
}

// afisare curba lui Hilbert
void Displayk4()
{
	CCurbaHilbert cch;
	cch.afisare(0.05, nivel);

	char c[3];
	sprintf_s(c, "%2d", nivel);
	glRasterPos2d(-0.98, -0.98);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'N');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'v');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, '=');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[0]);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, c[1]);

	glRasterPos2d(-1.0, -0.9);
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'c');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'u');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'a');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, ' ');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'H');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'i');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'l');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'b');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'e');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 'r');
	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, 't');

	nivel++;
}

class CJuliaFatou
{
public:
	CJuliaFatou()
	{
		// m.c se initializeaza implicit cu 0+0i

		m.nriter = NRITER_JF;
		m.modmax = MODMAX_JF;
	}

	CJuliaFatou(CComplex& c)
	{
		m.c = c;
		m.nriter = NRITER_JF;
		m.modmax = MODMAX_JF;
	}

	~CJuliaFatou()
	{
	}

	void setmodmax(double v)
	{
		assert(v <= MODMAX_JF);
		m.modmax = v;
	}

	double getmodmax() { return m.modmax; }

	void setnriter(int v)
	{
		assert(v <= NRITER_JF);
		m.nriter = v;
	}

	int getnriter() { return m.nriter; }

	// testeaza daca x apartine multimii Julia-Fatou Jc
	// returneaza 0 daca apartine, -1 daca converge finit, +1 daca converge infinit
	int isIn(CComplex& x)
	{
		CComplex z0 = x;
		for (int i = 1; i < m.nriter; i++)
		{
			CComplex z1 = z0 * z0 + m.c;
			if (z1 == z0)
				return -1;
			if (z1.getModul() > m.modmax)
				return 1;
			z0 = z1;
		}
		return 0;
	}

	// afisarea multimii J-F care intersecteaza multimea argument
	void display(double xmin, double ymin, double xmax, double ymax)
	{
		glPushMatrix();
		glLoadIdentity();

		//    glTranslated((xmin + xmax) * 1.0 / (xmin - xmax), (ymin + ymax)  * 1.0 / (ymin - ymax), 0);
		//    glScaled(1.0 / (xmax - xmin), 1.0 / (ymax - ymin), 1);
		// afisarea propriu-zisa
		glBegin(GL_POINTS);
		for (double x = xmin; x <= xmax; x += RX_JF)
			for (double y = ymin; y <= ymax; y += RY_JF)
			{
				CComplex z(x, y);
				int r = isIn(z);
				// z.print(stdout);
				if (r == 0)
				{
					// fprintf(stdout, "   \n");
					glVertex3d(x, y, 0);
				}
				// else if (r == -1)
				// 	// fprintf(stdout, "   converge finit\n");
				// else if (r == 1)
				// 	// fprintf(stdout, "   converge infinit\n");
			}
		fprintf(stdout, "STOP\n");
		glEnd();

		glPopMatrix();
	}

private:
	struct SDate
	{
		CComplex c;
		// nr. de iteratii
		int nriter;
		// modulul maxim
		double modmax;
	} m;
};

class Random
{
	static unsigned long x, y, z;
public:

	static float xorshf96(void)
	{
		//period 2^96-1
		unsigned long t;
		x ^= x << 16;
		x ^= x >> 5;
		x ^= x << 1;

		t = x;
		x = y;
		y = z;
		z = t ^ x ^ y;

		return static_cast<float>(z) / ULONG_MAX;
	}
};

unsigned long Random::x = 123456789;
unsigned long Random::y = 362436069;
unsigned long Random::z = 521288629;
	

class Img1
{
public:
	static void image(double x, double y, double length, int depth)
	{
		if (depth == 0)
			return;

		length = length / 3;
		rect(x, y, length);

		rect(x, y + length + length, length / 3);
		image(x, y + 2 * length, length, depth - 1);

		rect(x - 2 * length, y + 2 * length, length / 3);
		image(x - 2 * length, y + 2 * length, length, depth - 1);

		rect(x + 2 * length, y + 2 * length, length / 3);
		image(x + 2 * length, y + 2 * length, length, depth - 1);


		rect(x + 2 * length, y, length / 3);
		image(x + 2 * length, y, length, depth - 1);

		rect(x - 2 * length, y, length / 3);
		image(x - 2 * length, y, length, depth - 1);

		rect(x + 2 * length, y, length / 3);
		image(x + 2 * length, y, length, depth - 1);


		rect(x - 2 * length, y - 2 * length, length / 3);
		image(x - 2 * length, y - 2 * length, length, depth - 1);

		rect(x, y - 2 * length, length / 3);
		image(x, y - 2 * length, length, depth - 1);

		rect(x + 2 * length, y - 2 * length, length / 3);
		image(x + 2 * length, y - 2 * length, length, depth - 1);
	}


	static void render()
	{
		depth++;
		std::cout << depth << "\n";
		if (depth == 7)
			depth = 1;
		rect(0, 0, 0.95);
		image(0, 0, 0.95, depth);
	}

	static void rect(double x, double y, double distance)
	{
		CVector v(0.0, -1.0);
		CPunct p(x - distance, y + distance);
		double d = 2 * distance;
		v.rotatie(90);
		v.deseneaza(p, d);
		p = v.getDest(p, d);

		v.rotatie(-90);
		v.deseneaza(p, d);
		p = v.getDest(p, d);

		v.rotatie(-90);
		v.deseneaza(p, d);
		p = v.getDest(p, d);
		v.rotatie(-90);
		v.deseneaza(p, d);


		// glColor3f(rand(), abs(x), abs(y));
		//
		//
		// glBegin(GL_LINE_STRIP);
		// glVertex2d(x - distance, y + distance);
		// glVertex2d(x + distance, y + distance);
		// glVertex2d(x + distance, y - distance);
		// glVertex2d(x - distance, y - distance);
		// glVertex2d(x - distance, y + distance);
		// glEnd();
	}

	double limit = 0.00000001;
	static double length;
	static int depth;
};

double Img1::length = 1.5;
int Img1::depth = 1;


class Img2
{
public:
	static void arbore(double length, int depth, CPunct& p, CVector v)
	{
		if (depth == 0)
			return;
		v.rotatie(-45);
		v.deseneaza(p, length);
		auto p1 = v.getDest(p, length);
		arbore(length * mul, depth - 1, p1, v);

		v.rotatie(90);
		v.deseneaza(p, length);
		auto p2 = v.getDest(p, length);


		v.rotatie(-45);
		v.deseneaza(p2, length);
		auto p3 = v.getDest(p2, length);

		v.rotatie(60);
		v.deseneaza(p2, length);
		auto p4 = v.getDest(p2, length);
		arbore(length * mul, depth - 1, p4, v);

		v.rotatie(-150);
		v.deseneaza(p3, length / 2);
		auto p5 = v.getDest(p3, length / 2);
		arbore(length * mul, depth - 1, p5, v);

		v.rotatie(120);
		v.deseneaza(p3, length / 2);
		auto p6 = v.getDest(p3, length / 2);
		arbore(length * mul, depth - 1, p6, v);
	}

	static void render()
	{
		CVector v(0.0, -1.0);
		CPunct p(-0.2, 1.0);
		v.deseneaza(p, 0.3);
		p = v.getDest(p, 0.3);
		if (depth == 9)
			depth = 0;
		depth++;
		arbore(0.3, depth, p, v);
	}

	static int depth;
	static float mul;
};

int Img2::depth = 1;
float Img2::mul = 0.5;

#define MAX_ITER_MANDELBROT 5000
#define MAX_VALUE_MANDELBROT 10000000

class Mandelbrot
{
public:


	Mandelbrot()
	{
		max_iter = MAX_ITER_MANDELBROT;
	}


	void set_step(double step)
	{
		this->step = step;
	}

	void set_max_iter(int max_iter)
	{
		this->max_iter = max_iter;
	}


	void set_diver(int diver)
	{
		this->diver = diver;
	}

	unsigned int is_in(const CComplex& otherZ)
	{
		auto z0 = CComplex(0, 0);
		for (auto i = 1; i < max_iter; i++)
		{
			auto z1 = z0 * z0 + otherZ;
			if (z1.getModul() > 2.0f)
				return i;
			z0 = z1;
		}
		return 0;
	}


	void display(double xmin, double ymin, double xmax, double ymax)
	{
		glPushMatrix();
		glLoadIdentity();
		glBegin(GL_POINTS);
		int max_ = 0;
		for (double x = xmin; x <= xmax; x += step)
			for (double y = ymin; y <= ymax; y += step)
			{
				CComplex z(x, y);
				int iter = is_in(z);
				if (iter == 0)
				{
					glColor3f(0.44705882, 0.066666, 0.129411);
					glVertex2d((x + 0.5) / 1.5, y / 2);
				}
				else
				{
					int color = (iter % 20) * diver;
					glColor4f(iter * 4 / 100.0f, color / 260.0f, 0.1503, 1 - 3 * color / 250.0f);
					glVertex2d((x + 0.5) / 1.5, y / 2);
				}
			}
		std::cout << max_;
		glEnd();

		glPopMatrix();
	}

	static void Display1()
	{
		Mandelbrot m1;
		m1.set_max_iter(400);
		// m1.set_step(0.00076);
		m1.set_step(0.003);
		m1.set_diver(5);
		m1.display(-2.0f, -2.0f, 2.0f, 2.0f);
	}


private:
	CComplex c;
	int max_iter;
	double max_value;
	double step;
	int diver = 1;
};

class Sierpinski
{
public:
	Sierpinski(int depth, double angle, double length, CPunct& punct, CVector& vector)
	{
		this->depth = depth;
		this->angle = (depth % 2 == 0) ? -angle : angle;
		this->length = length;
		point = punct;
		this->vector = vector;
	}

	void draw()
	{
		A(depth);
	}

	void plus_symbol()
	{
		vector.rotatie(angle);
	}

	void minus_symbol()
	{
		vector.rotatie(-angle);
	}

	void B(int dep)
	{
		if (dep == 0)
		{
			drawLine();
			plus_symbol();
			drawLine();
			plus_symbol();
			drawLine();
			return;
		}
		dep--;
		A(dep);
		plus_symbol();
		B(dep);
		plus_symbol();
		A(dep);
	}

	void A(int dep)
	{
		if (dep == 0)
		{
			drawLine();
			minus_symbol();
			drawLine();
			minus_symbol();
			drawLine();
			return;
		}
		dep--;
		B(dep);
		minus_symbol();
		A(dep);
		minus_symbol();
		B(dep);
	}

	void drawLine()
	{
		vector.deseneaza(point, length);
		point = vector.getDest(point, length);
	}


	static void render()
	{
		CVector v(0.0, -1.0);
		CPunct p(-0.95, 0.95);
		auto f = 0.026 * (depth_S + 11);
		auto scaleFactor = 1 / pow(2, depth_S - 3);
		if (depth_S < 4)
		{
			scaleFactor = 1.0f;
			f = 0;
		}
		std::cout << -((10.0f - depth_S) / 10) << "\n";
		glPushMatrix();
		glLoadIdentity();
		glTranslated(-f, f * 1.45, 0.0);
		glScaled(scaleFactor, scaleFactor, 1);

		auto s = Sierpinski(depth_S, 60, 0.1, p, v);
		s.draw();
		glPopMatrix();
		depth_S++;
		if (depth_S > 11)
			depth_S = 1;
	}

private:
	int depth;
	double angle;
	double length;
	CPunct point;
	CVector vector;
	static int depth_S;
};

int Sierpinski::depth_S = 1;


unsigned char prevKey;

// multimea Julia-Fatou pentru z0 = 0 si c = -0.12375+0.056805i
void DisplayJ1()
{
	CComplex c(-0.12375, 0.056805);
	CJuliaFatou cjf(c);

	glColor3f(1.0, 0.1, 0.1);
	cjf.setnriter(30);
	cjf.display(-0.8, -0.4, 0.8, 0.4);
}

// multimea Julia-Fatou pentru z0 = 0 si c = -0.012+0.74i
void DisplayJ2()
{
	CComplex c(-0.012, 0.74);
	CJuliaFatou cjf(c);

	glColor3f(1.0, 0.1, 0.1);
	cjf.setnriter(30);
	cjf.display(-1, -1, 1, 1);
}

void Init(void)
{
	glClearColor(1.0, 1.0, 1.0, 1.0);

	glLineWidth(1);

	glPointSize(3);

	glPolygonMode(GL_FRONT, GL_LINE);
}


void Display(void)
{
	switch (prevKey)
	{
	case '0':
		glClear(GL_COLOR_BUFFER_BIT);
		nivel = 0;
		fprintf(stderr, "nivel = %d\n", nivel);
		break;
	case '1':
		glClear(GL_COLOR_BUFFER_BIT);
		Displayk1();
		break;
	case '2':
		glClear(GL_COLOR_BUFFER_BIT);
		Displayk2();
		break;
	case '3':
		glClear(GL_COLOR_BUFFER_BIT);
		Displayk3();
		break;
	case '4':
		glClear(GL_COLOR_BUFFER_BIT);
		Displayk4();
		break;
	case '5':
		glClear(GL_COLOR_BUFFER_BIT);
		DisplayJ1();
		break;
	case '6':
		glClear(GL_COLOR_BUFFER_BIT);
		DisplayJ2();
		break;
	case '7':
		glClear(GL_COLOR_BUFFER_BIT);
		Mandelbrot::Display1();
		break;
	case '8':
		glClear(GL_COLOR_BUFFER_BIT);
		Img1::render();
		break;
	case '9':
		glClear(GL_COLOR_BUFFER_BIT);
		Img2::render();
		break;
	case '-':
		glClear(GL_COLOR_BUFFER_BIT);
		Sierpinski::render();
		break;
	default:
		break;
	}

	glFlush();
}

void Reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
}

void KeyboardFunc(unsigned char key, int x, int y)
{
	prevKey = key;
	if (key == 27) // escape
		exit(0);
	glutPostRedisplay();
}

void MouseFunc(int button, int state, int x, int y)
{
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);

	glutInitWindowSize(DIM, DIM);

	glutInitWindowPosition(100, 100);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

	glutCreateWindow(argv[0]);

	Init();

	glutReshapeFunc(Reshape);

	glutKeyboardFunc(KeyboardFunc);

	glutMouseFunc(MouseFunc);

	glutDisplayFunc(Display);

	glutMainLoop();

	return 0;
}
